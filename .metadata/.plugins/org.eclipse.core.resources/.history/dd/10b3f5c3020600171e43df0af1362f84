package hr.fer.zemris.java.custom.collections;

import java.util.LinkedList;

public class LinkedListIndexedCollection extends Collection {

	private static class ListNode {
		ListNode previous;
		ListNode next;
		Object value;
	}

	private int size = 0;
	private ListNode first;
	private ListNode last;

	public static void main(String[] args) {
		LinkedListIndexedCollection kolekcija = new LinkedListIndexedCollection();
		kolekcija.add(1);
		kolekcija.add(2);
		kolekcija.add(3);
		kolekcija.add(4);
		kolekcija.add(5);
		System.out.println(kolekcija.first.value+ " " + kolekcija.first.next.value +" " +kolekcija.first.next.next.value+ " "+ kolekcija.first.next.next.next.value+ " "+ kolekcija.first.next.next.next.next.value);
//		for(int i=0; i<kolekcija.size; i++){
//			System.out.println(kolekcija.get(i) + " ");
//		}
	}

	private Object get(int index) {
		if (index < 0 || index > this.size) {
			throw new IndexOutOfBoundsException();
		}
		if (index > size / 2) {
			ListNode node = this.last;
			int j = size;
			while(j>index){
				node=node.previous;
				j--;
			}
			return node.value;
		} else {
			ListNode first = this.first;
			for (int j = 0; j < index; j++) {
				first = first.next;
			}
			return first.value;
		}
	}

	protected LinkedListIndexedCollection() {
		this.first = null;
		this.last = null;
	}

	protected LinkedListIndexedCollection(Collection collection) {
		this();
		this.addAll(collection);
	}

	public int size() {
		return size;
	}

	public void add(Object value) {
		if (value == null) {
			throw new IllegalArgumentException();
		}
		ListNode node = new ListNode();
		node.value = value;
		if (size == 0) {
			first = last = node;
		} else {
			last.next = node;
			node.previous = last;
			last = node;
		}
		size++;
	}

	public boolean contains(Object value) {
		if (indexOf(value) < 0)
			return false;
		return true;
	}

	public int indexOf(Object value) {
		ListNode current = this.first;
		for (int index = 0; current != null; index++, current = current.next) {
			if (current.equals(value)) {
				return index;
			}
		}
		return -1;
	}

	public boolean remove(Object value) {
		if (this.first.value == value)
			return true;
		else {
			ListNode current = this.first.next;
			while (current.next != null) {
				if (current.value == value) {
					current.previous.next = current.next;
					current.next.previous = current.previous;
					return true;
				}
			}
		}
		return false;
	}

}
