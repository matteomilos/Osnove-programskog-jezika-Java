package hr.fer.zemris.java.custom.collections;

import java.util.LinkedList;

public class LinkedListIndexedCollection extends Collection {

	private static class ListNode {
		ListNode previous;
		ListNode next;
		Object value;
	}

	private int size = 0;
	private ListNode first;
	private ListNode last;

	public static void main(String[] args) {
		LinkedListIndexedCollection kolekcija = new LinkedListIndexedCollection();
		kolekcija.add("kita");
		kolekcija.add("kurcina");
		kolekcija.add("picka");
		kolekcija.add("vagina");
		kolekcija.add("govno");
		kolekcija.remove(4);
		// System.out.println(kolekcija.first.value+ " " +
		// kolekcija.first.next.value +" " +kolekcija.first.next.next.value+ "
		// "+ kolekcija.first.next.next.next.value+ " "+
		// kolekcija.first.next.next.next.next.value);
		for (int i = 0; i < kolekcija.size; i++) {
			System.out.println(kolekcija.get(i) + " ");
		}
//		System.out.println(kolekcija.indexOf(3));
	}

	private Object get(int index) {
		if (index < 0 || index > this.size) {
			throw new IndexOutOfBoundsException();
		}
		if (index > size / 2) {
			ListNode current = this.last;
			for (int j = size - 1; j > index; j--) {
				current = current.previous;
			}
			return current.value;
		} else {
			ListNode current = this.first;
			for (int j = 0; j < index; j++) {
				current = current.next;
			}
			return current.value;
		}
	}

	protected LinkedListIndexedCollection() {
		this.first = null;
		this.last = null;
	}

	protected LinkedListIndexedCollection(Collection collection) {
		this();
		this.addAll(collection);
	}

	public int size() {
		return size;
	}

	public void add(Object value) {
		if (value == null) {
			throw new IllegalArgumentException();
		}
		ListNode node = new ListNode();
		node.value = value;
		if (size == 0) {
			first = last = node;
		} else {
			last.next = node;
			node.previous = last;
			last = node;
		}
		size++;
	}

	public boolean contains(Object value) {
		if (indexOf(value) < 0)
			return false;
		return true;
	}

	public int indexOf(Object value) {
		ListNode current = this.first;
		for (int index = 1; current != null; index++) {
			if (current.value.equals(value)) {
				return index;
			}
			current = current.next;

		}
		return -1;
	}
	
	public void remove (int index){
		if(index<0 || index > size){
			throw new IndexOutOfBoundsException();
		}
		ListNode current = this.first;
		for (int i = 1; i < index; i++) {
			current = current.next;
		}
		current.previous.next = current.next;
		current.next.previous = current.previous;
		size--;
	}

	public boolean remove(Object value) {
		if (value == null) {
			throw new IllegalArgumentException();
		}
		int location = indexOf(value);
		if(location<0){
			return false;
		}
		else{
			remove(location);
			return true;
		}
	}

}
