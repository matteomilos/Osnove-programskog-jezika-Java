package hr.fer.zemris.bf.lexer;

/**
 * This class represents token that is generated by lexer instance of the class
 * {@link Lexer}. Token has its own type and value. More about types of tokens
 * here: {@link TokenType}.
 * 
 * @author Matteo Milo≈°
 *
 */
public class Token {

	/** Enumeration that defines token type */
	TokenType tokenType;

	/** Object that is encapsulated by token */
	Object tokenValue;

	/**
	 * Public constructor that gets two arguments, enumeration that defines type
	 * and object that needs to be stored.
	 * 
	 * @param tokenType
	 *            type of token
	 * @param tokenValue
	 *            object that will be stored
	 * @throws LexerException
	 *             if token type is <code>null</code> value
	 */
	public Token(TokenType tokenType, Object tokenValue) {
		if (tokenType == null) {
			throw new LexerException("Type of the token mustn't be null!");
		}
		this.tokenType = tokenType;
		this.tokenValue = tokenValue;
	}

	/**
	 * Public getter of enumeration that defines token.
	 * 
	 * @return token type
	 */
	public TokenType getTokenType() {
		return tokenType;
	}

	/**
	 * Public getter for object that is stored in token.
	 * 
	 * @return token value
	 */
	public Object getTokenValue() {
		return tokenValue;
	}

	@Override
	public String toString() {

		StringBuilder sb = new StringBuilder();

		sb.append("Type: ").append(tokenType).append(", Value: ").append(tokenValue);

		if (tokenValue != null) {
			sb.append(", Value is instance of: ").append(tokenValue.getClass().getName());
		}

		return sb.toString();
	}

}
